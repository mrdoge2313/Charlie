
local GramxProjectFloat = tostring(math.random(0, 100000))
local TweenFloatVelocity = Vector3.new(0,0,0)
function CreateTweenFloat()
   local BV = game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild(GramxProjectFloat) or Instance.new("BodyVelocity")
   BV.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
   BV.Name = GramxProjectFloat
   BV.MaxForce = Vector3.new(100000, 100000, 100000)
   BV.Velocity = TweenFloatVelocity
end


local function GetDistance(Endpoint)
   if typeof(Endpoint) == "Instance" then
   Endpoint = Vector3.new(Endpoint.Position.X, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
   elseif typeof(Endpoint) == "CFrame" then
   Endpoint = Vector3.new(Endpoint.Position.X, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
   end
   local Magnitude = (Endpoint - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
   return Magnitude
end


function Tween(Endpoint)
   if typeof(Endpoint) == "Instance" then
   Endpoint = Endpoint.CFrame
   end
   local TweenFunc = {}
   local Distance = GetDistance(Endpoint)
   local TweenInfo = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(Distance/getgenv().TweenSpeed, Enum.EasingStyle.Linear), {CFrame = Endpoint * CFrame.fromAxisAngle(Vector3.new(1,0,0), math.rad(0))})
   TweenInfo:Play()
   function TweenFunc:Cancel()
   TweenInfo:Cancel()
   return false
   end
   if Distance <= 100 then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Endpoint
   TweenInfo:Cancel()
   return false
   end
   return TweenFunc
end


local function SkillBind(bind)
   pcall(function()
       VIM:SendKeyEvent(true,bind,false,game)
       task.wait()
       VIM:SendKeyEvent(false,bind,false,game)
       wait(.2)
   end)
end
--------- SERVICES //TEST WORKS [MAP 2]
local UIS = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local VIM = game:GetService("VirtualInputManager")
local ReplStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Input = game:GetService("UserInputService")
local LP = game:GetService("Players").LocalPlayer
local HttpService = game:GetService("HttpService")
local RunS = game:GetService("RunService")
local X, Y = 0, 0
local Mouse = LP:GetMouse()
local GetLocalName = LP.Name
local request = (syn and syn.request) or (http and http.request) or http_request
local client = game:GetService("Players").LocalPlayer
local Plr = game:GetService("Players").LocalPlayer
local Data = game:GetService("ReplicatedStorage")["Player_Data"][game.Players.LocalPlayer.Name]
local Tool = game:GetService("ReplicatedStorage").Tools:GetChildren()
local WebhookURL = "" 
game:GetService("Players").LocalPlayer.DisplayName = "SharkHub"

local function GetHuman()
   local h = LP.Character
   h = h and (h:FindFirstChild("Humanoid") or h:FindFirstChildWhichIsA("Humanoid"))
   return h or workspace.CurrentCamera.CameraSubject
end

--------- SERVICES // TABLES

local BossessTable = {"Rengoku","Inosuke","Renpeke","Muichiro Tokito","Enme","Swampy","Akeza","Douma","Tengen","Sound Trainee"}
local bosCFTable = {
    ["Rengoku"] = CFrame.new(3656, 673, -345),
    ["Akeza"] = CFrame.new(2010, 556, -128),
    ["Renpeke"] = CFrame.new(-1258, 601, -650),
    ["Muichiro Tokito"] = CFrame.new(4513, 673, -544),
    ["Enme"] = CFrame.new(1591, 484, -690),
    ["Swampy"] = CFrame.new(-1377, 601, -202),
    ["Douma"] = CFrame.new(-5, 513, -1689),
    ["Tengen"] = CFrame.new(1464, 486, -3118),
    ["Sound Trainee"] = CFrame.new(1897, 663, -2805),
    ["Inosuke"] = CFrame.new(1585, 300, -389),
}
   
--------- SERVICES // KA

local function attack(method)

	wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
    wait()
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")

end

local attackMethods = {
    ["Combat"] = 'fist_combat',
    ["Sword"] = 'Sword_Combat_Slash',
    ["Scythe"] = 'Scythe_Combat_Slash',
    ["Claw"] = 'claw_Combat_Slash',
    ["Fans"] = 'fans_combat_slash'
}

if game.ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("getclientping") then 
    game.ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("getclientping").OnClientInvoke = function() 
        task.wait(5)
        return true 
    end 
end 

-- // FARM METHOD
spawn(function()
   while wait() do
       pcall(function()
           SkillActive = AutoUseSkills and (FarmBoss and NearestMobs) or AutoUseSkills and (FarmQuest and NearestMobs) or AutoUseSkills and (FarmMob and NearestMobs) or AutoUseSkills and (AllBosses and NearestMobs)
           if FarmMethod == "Above" then
               FarmModes = CFrame.new(0,getgenv().Distance,0) * CFrame.Angles(math.rad(-90),0,0) 
           elseif FarmMethod == "Below" then
               FarmModes = CFrame.new(0,-getgenv().Distance,0) * CFrame.Angles(math.rad(90),0,0)
           elseif FarmMethod == "Behind" then
               FarmModes = CFrame.new(0,0,getgenv().Distance)
           elseif FarmMethod == "Front" then
               FarmModes = CFrame.new(0,0,-getgenv().Distance)
           end
           for i,v in pairs(LP.PlayerGui.MainGuis.Items.Scroll:GetChildren()) do
               Insert = true
               if v.ClassName == "Frame" and v.Name ~= "Health Elixir" and v.Name ~= "Health Regen Elixir" and v.Name ~= "Stamina Elixir" and v.Name ~= "Bandage" then
                   for i,v2 in pairs(invTable) do if v2 == v.Name then Insert = false end end
                   if Insert == true then table.insert(invTable, v.Name) end
               end
           end
       end)
   end
  end)

-- // NO CLIP


--------- SERVICES // ANTI AFK

-- // KILL AURA - FARM
	
local killAuraWait = 1.25  -- Initial value for Kill Aura wait time

task.spawn(function()
    while task.wait() do
        pcall(function()
            if getgenv().KillAura then
                attack(attackMethods[Method])
                task.wait(killAuraWait)  -- Use the updated Kill Aura wait time
                repeat
                    wait()
                until game.Players.LocalPlayer:WaitForChild("combotangasd123").Value == 0
            end
        end)
    end
end)



-- // AUTO ALL BOSSES - FARM

spawn(function()
   while task.wait() do
       pcall(function()
           if getgenv().AllBosses then

               if not LP.Character.HumanoidRootPart:FindFirstChild("BodyVelocity") then
                   antifall3 = Instance.new("BodyVelocity", LP.Character.HumanoidRootPart)
                   antifall3.Velocity = Vector3.new(0, 0, 0)
                   antifall3.MaxForce = Vector3.new(9e9, 9e9, 9e9)
               elseif LP.Character.HumanoidRootPart:FindFirstChild("BodyVelocity") then
                   local v = GetNearestBoss()

                               repeat task.wait()                                      
                                   if GetDistance(v:GetModelCFrame() * FarmModes) < 25 and GetDistance(v:GetModelCFrame() * FarmModes) < 150 then
                                       if TweenFa then
                                       TweenFa:Cancel()
                                       wait(.1)
                                       end
                                       LP.Character.HumanoidRootPart.CFrame = v:GetModelCFrame() * FarmModes
                                   else
                                       TweenFa = Tween(v:GetModelCFrame() * FarmModes)
                                   end
                                   if v.Humanoid.Health > 0 and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and GetDistance(v:GetModelCFrame() * FarmModes) < 10 then
                                       NearestMobs = true
                                   elseif v.Humanoid.Health <= 0 or not v:FindFirstChild("Humanoid") and GetDistance(v:GetModelCFrame() * FarmModes) > 10 then
                                       NearestMobs = false
                                   end
                               until not getgenv().AllBosses or not v.Parent or v.Humanoid.Health <= 0 or not v:IsDescendantOf(workspace)
                               NearestMobs = false
                       
                   
               end
           else
               antifall3:Destroy()
           end
           if getgenv().AllBosses == false then
               TweenFa:Cancel()
           end
       end)
   end
end)

-- // AUTO COLLECT CHESTS - FARM
	

 spawn(function()
     while task.wait() do
         if AutoCollectChestv2 then
             for _, v in pairs(game:GetService("Workspace").Debree:GetChildren()) do
                 if v.Name == "Loot_Chest" and v:FindFirstChild("Drops") then
                     if #v.Drops:GetChildren() == 0 then
                         v:Destroy()
                     else
                         for _, drop in pairs(v.Drops:GetChildren()) do
                             local args = {
                                 [1] = drop.Name
                             }
 
                             v.Add_To_Inventory:InvokeServer(unpack(args))
                             if #v.Drops:GetChildren() == 0 then
                                 v:Destroy()
                             end
                         end
                     end
                 end
             end
         end
     end
 end)    



------ LIBRARY
local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Shark Hub v3 Fan Made',
    Center = true,
    AutoShow = true,
})


local Tabs = {
   Main = Window:AddTab('Main'),
   ['Settings'] = Window:AddTab('UI Settings'),

}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Farm Settings]')
local LeftGroupBox2 = Tabs.Main:AddLeftGroupbox('Farms]')


LeftGroupBox:AddButton("Fan Made By Potrick", function()
end)

getgenv().Method = "Sword"
LeftGroupBox:AddDropdown('KillAura', {
    Values = { 'Sword', 'Combat', 'Scythe', 'Claw', 'Fans' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    Text = 'Kill Aura Method',
    Tooltip = 'Select Kill Aura Method', -- Information shown when you hover over the textbox
    Callback = function(self)
		getgenv().Method = self
    end
 })
 
 getgenv().FarmMethod = "Above"
 LeftGroupBox:AddDropdown('FarmMethod', {
    Values = { 'Above', 'Below', 'Behind', 'Front' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    Text = 'Farm Method',
    Tooltip = 'Select Farm Method', -- Information shown when you hover over the textbox
    Callback = function(self)
		getgenv().FarmMethod = self
    end
 })

 getgenv().TweenSpeed = 100
 LeftGroupBox:AddSlider('MySlider', {
    Text = 'Tween Speed',
    Default = 100,
    Min = 10,
    Max = 500,
    Rounding = 10,
    Compact = false,
    Callback = function(self)
		getgenv().TweenSpeed = self
    end
})

getgenv().Distance = 5
LeftGroupBox:AddSlider('MySlider2', {
    Text = 'Distance',
    Default = 5,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Compact = false,
    Callback = function(self)
		getgenv().Distance = self
    end
})


LeftGroupBox2:AddToggle('FarmBosses', {
    Text = 'Farm Bosses',
    Default = false, -- Default value (true / false)
    Tooltip = 'Kill Aura', -- Information shown when you hover over the toggle
    Callback = function(value)
        getgenv().AllBosses = value
    end
})

LeftGroupBox2:AddToggle('KillAura', {
   Text = 'Kill Aura',
   Default = false, -- Default value (true / false)
   Tooltip = 'Kill Aura', -- Information shown when you hover over the toggle
   Callback = function(value)
       getgenv().KillAura = value
   end
})
local debounce = 1
function by()
if debounce == 1 then

                             local Handle_Initiate_S_ = game.ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_
                Handle_Initiate_S_:InvokeServer("skil_ting_asd", game.Players.LocalPlayer, "arrow_knock_back", 5)
 debounce = 2
end
end

LeftGroupBox2:AddToggle('GKAarroWW', {
    Text = 'Arrow Ka [16H]',
    Default = false,
    Tooltip = 'Global Kill Aura (ARROW)',
    Callback = function(state)
        running = state -- Update the running state -- Update the firing state
by()
        if running then -- Start the loop only if running is true
            while running do -- Loop while running is true
                local success, error = pcall(function()
                    for i, v in next, workspace.Mobs:GetDescendants() do
                        if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                            local Handle_Initiate_S_ = game.ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_
                            Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                            Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                            Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                            Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                            Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                            Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                            Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                        end
                    end
                end)

                if not success then
                    print("An error occurred:", error)
                end

                -- Add a delay between iterations to prevent excessive server load
                wait() -- Adjust the delay time as desired
            end
        end
    end
})

local running = false -- Variable to track the state
local debounce2 = 1
function by2()
if debounce2 == 1 then

                             local Handle_Initiate_S_ = game.ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_
                Handle_Initiate_S_:InvokeServer("skil_ting_asd", game.Players.LocalPlayer, "arrow_knock_back", 5)
 debounce2 = 2
end
end
LeftGroupBox2:AddToggle('GKAareroWeeW', {
    Text = 'Arrow Ka [14H]',
    Default = false,
    Tooltip = 'safe',
    Callback = function(state)
        running = state
        by2() -- Update the running state -- Update the firing state
          
        if running then -- Start the loop only if running is true
            while running do
                local success, error = pcall(function()
                    local hitCounter = {} -- Counter for each model

                    for i, v in next, workspace.Mobs:GetDescendants() do
                        if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                            local modelId = v:GetFullName()

                            -- Check if the model has a counter and initialize it if not present
                            if not hitCounter[modelId] then
                                hitCounter[modelId] = 0
                            end

                            -- Check if the model has been hit less than 2 times
                            if hitCounter[modelId] < 2 then
                                local humanoid = v:FindFirstChildOfClass("Humanoid")
                                if humanoid and humanoid.Health > 0 then
                                    local Handle_Initiate_S_ = game.ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_
                                    Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                                    hitCounter[modelId] = hitCounter[modelId] + 1
                                else
                                end
                            end

                            -- Check if we hit two mobs/models
                            local hitCount = 0
                            for _, count in pairs(hitCounter) do
                                hitCount = hitCount + count
                            end
                            if hitCount >= 2 then
                                break -- Exit the loop if we hit two mobs/models
                            end
                        end
                    end
                end)

                if not success then

                end

                -- Add a delay between iterations to prevent excessive server load
                wait() -- Adjust the delay time as desired
            end
        end
    end
})

LeftGroupBox:AddSlider('KASlider', {
    Text = 'Kill Aura',
    Default = 1.25,
    Min = 0.25,
    Max = 5,
    Rounding = 1,
    Compact = false,
    Callback = function(self)
        killAuraWait = self.Value 
    end
})
LeftGroupBox2:AddToggle('AutoCollectChest', {
   Text = 'Auto Collect Chest',
   Default = false, -- Default value (true / false)
   Tooltip = 'Auto Collect Chest (Will Remove Chest After Collecting)', -- Information shown when you hover over the toggle
   Callback = function(value)
     getgenv().AutoCollectChestv2 = value
   end
})


spawn(function()
    while task.wait() do
        if getgenv().AutoBlock then
            local args = {
                [1] = "add_blocking",
                [3] = 11565.6265117,
                [4] = game:GetService("ReplicatedStorage").PlayerValues[game.Players.LocalPlayer.Name],
                [5] = math.huge
            }
            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))
        end
    end
end)

LeftGroupBox2:AddToggle('Block', {
    Text = 'Block',
    Default = false,
    Tooltip = '[No Skills]',
    Callback = function(value)
        if value then
            getgenv().AutoBlock = true
        else
            getgenv().AutoBlock = false
            local args = {
                [1] = "remove_blocking",
                [2] = game:GetService("ReplicatedStorage"):WaitForChild("PlayerValues"):WaitForChild(game.Players.LocalPlayer.Name)
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S_"):InvokeServer(unpack(args))
        end
    end
})


LeftGroupBox2:AddToggle('AutoEatSouls', {
   Text = 'Auto Eat Souls',
   Default = false, -- Default value (true / false)
   Tooltip = 'Auto Eat Souls [Demon]', -- Information shown when you hover over the toggle
   Callback = function(value)
      getgenv().AutoEatSouls = value
   end
})


local RightGroupBox = Tabs.Main:AddRightGroupbox('Clan')
RightGroupBox:AddDropdown('SelectClan', {
    Values = { 'Kamado', 'Uzui', 'Rengoku', 'Agatsuma', 'Tomioka', 'Tokito', 'Hashibira', 'Soyama', 'Shinazugawa', 'Kocho', 'Sabito', 'Tamayo', 'Kuwajima', 'Makamo' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    Text = 'Select Clan',
    Callback = function(v)
        local localplayer = game:GetService("Players").LocalPlayer
        local clanValue = v
        game:GetService("ReplicatedStorage").Player_Data[localplayer.Name].Clan.Value = clanValue
    end
})


RightGroupBox:AddButton("Spin Art", function()
    local args = {
       [1] = "check_can_spin_demon_art"
   }
   
   game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S_"):InvokeServer(unpack(args))    
end)
local RightGroupBox3 = Tabs.Main:AddRightGroupbox('Auto Skill')
RightGroupBox3:AddToggle('AutoSkill', {
   Text = 'Auto Skill',
   Default = false, -- Default value (true / false)
   Callback = function(t)
         getgenv().AutoUseSkills = t
   end
})

RightGroupBox3:AddToggle('Z Move', {
   Text = '[Z] Move',
   Default = false, -- Default value (true / false)
   Callback = function(t)
         getgenv().ZMove = t
   end
})

RightGroupBox3:AddToggle('X Move', {
   Text = '[X] Move',
   Default = false, -- Default value (true / false)
   Callback = function(t)
         getgenv().XMove = t
   end
})

RightGroupBox3:AddToggle('C Move', {
   Text = '[C] Move',
   Default = false, -- Default value (true / false)
   Callback = function(t)
         getgenv().CMove = t
   end
})

RightGroupBox3:AddToggle('V Move', {
   Text = '[V] Move',
   Default = false, -- Default value (true / false)
   Callback = function(t)
         getgenv().VMove = t
   end
})

RightGroupBox3:AddToggle('B Move', {
   Text = '[B] Move',
   Default = false, -- Default value (true / false)
   Callback = function(t)
         getgenv().BMove = t
   end
})

RightGroupBox3:AddToggle('N Move', {
   Text = '[N] Move',
   Default = false, -- Default value (true / false)
   Callback = function(t)
         getgenv().NMove = t
   end
})

-- // AUTO USE SKILLS - SKILLS
	
spawn(function()
   while task.wait() do
      pcall(function()
         if SkillActive then
            if AutoUseSkills and getgenv().ZMove and not UsingSkill then
               for i = 1,7 do
                  UsingSkill = true
                  SkillBind("Z")
               end              
               UsingSkill = false
            end
         end
      end)
   end
end)


spawn(function()
   while task.wait() do
      pcall(function()
         if SkillActive then
            if AutoUseSkills and getgenv().XMove and not UsingSkill then
               for i = 1,7 do
                  UsingSkill = true
                  SkillBind("X")
               end              
               UsingSkill = false
            end
         end
      end)
   end
end)

spawn(function()
   while task.wait() do
      pcall(function()
         if SkillActive then
            if AutoUseSkills and getgenv().CMove and not UsingSkill then
               for i = 1,7 do
                  UsingSkill = true
                  SkillBind("C")
               end              
               UsingSkill = false
            end
         end
      end)
   end
end)

spawn(function()
   while task.wait() do
      pcall(function()
         if SkillActive then
            if AutoUseSkills and getgenv().VMove and not UsingSkill then
               for i = 1,7 do
                  UsingSkill = true
                  SkillBind("V")
               end              
               UsingSkill = false
            end
         end
      end)
   end
end)

spawn(function()
   while task.wait() do
      pcall(function()
         if SkillActive then
            if AutoUseSkills and getgenv().BMove and not UsingSkill then
               for i = 1,7 do
                  UsingSkill = true
                  SkillBind("B")
               end              
               UsingSkill = false
            end
         end
      end)
   end
end)

spawn(function()
   while task.wait() do
      pcall(function()
         if SkillActive then
            if AutoUseSkills and getgenv().NMove and not UsingSkill then
               for i = 1,7 do
                  UsingSkill = true
                  SkillBind("N")
               end              
               UsingSkill = false
            end
         end
      end)
   end
end)

-- // WALK SPEED - MISCELLANEOUS

spawn(function()
   while task.wait() do
      if getgenv().WalkSpeedEnabled then
         local h = GetHuman()
         local oldws = h and h.WalkSpeed
         if oldws then
            pcall(function()
               h.WalkSpeed = getgenv().WalkSpeedValue or oldws or 16
               while task.wait() and getgenv().WalkSpeedEnabled do
                  h.WalkSpeed = getgenv().WalkSpeedValue or oldws or 16
               end
            end)
            h.WalkSpeed = oldws or 16
         end
      end
   end
end)

-- // JUMP POWER - MISCELLANEOUS

spawn(function()
   while task.wait() do
      if getgenv().JumpPowerEnabled then
         local h = GetHuman()
         local oldjp = h and h.JumpPower
         if oldjp then
            pcall(function()
               h.JumpPower = getgenv().JumpPowerValue or oldjp or 50
               while task.wait() and getgenv().JumpPowerEnabled do
                  h.JumpPower = getgenv().JumpPowerValue or oldjp or 50
               end
            end)
            h.JumpPower = oldjp or 50
         end
      end
   end
end)	
local RightGroupBox4 = Tabs.Main:AddRightGroupbox('Misc')
RightGroupBox4:AddToggle('WalkSpeedT', {
   Text = 'Enable Walk Speed',
   Default = false, -- Default value (true / false)
   Callback = function(t)
      getgenv().WalkSpeedEnabled = t
   end
})

RightGroupBox4:AddSlider('WalkSpeedS', {
    Text = 'Walk Speed',
    Default = 16,
    Min = 16,
    Max = 500,
    Rounding = 1,
    Compact = false,
    Callback = function(v)
		getgenv().WalkSpeedValue = v
    end
})

RightGroupBox4:AddToggle('JumpPowerT', {
   Text = 'Enable Jump Power',
   Default = false, -- Default value (true / false)
   Callback = function(t)
      getgenv().JumpPowerEnabled = t
   end
})

RightGroupBox4:AddSlider('JumpPowerS', {
    Text = 'Jump Power',
    Default = 50,
    Min = 50,
    Max = 500,
    Rounding = 10,
    Compact = false,
    Callback = function(v)
		getgenv().JumpPowerValue = v
    end
})

RightGroupBox4:AddToggle('InfStamina', {
   Text = 'Infinite Stamina',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         getgenv().infstuff = true
         while getgenv().infstuff do
            task.wait()
            getrenv()._G:Stamina(-100)
         end
      else
         getgenv().infstuff = false
      end
   end
})

RightGroupBox4:AddToggle('InfBreathing', {
   Text = 'Infinite Breathing',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         getgenv().infstuff = true
         while getgenv().infstuff do
            task.wait()
            getrenv()._G:Breath(-100)
         end
      else
         getgenv().infstuff = false
      end
   end
})

-- // NO DROWN - MISCELLANEOUS

task.spawn(function()
   for i,v in next, getgc(true) do
      if type(v) == "table" and rawget(v, "swim_bar") then
         while task.wait() do
            if getgenv().NoDrown then
               rawset(v, "swim_bar", {
                  [1] = 2,
                  [2] = 2
               })
            end
         end
      end
   end
end)

RightGroupBox4:AddToggle('No Drown', {
   Text = 'No Drown',
   Default = false, -- Default value (true / false)
   Callback = function(t)
      getgenv().NoDrown = t
   end
})


local oldindex
RightGroupBox4:AddToggle('NoCD', {
   Text = 'No Cooldown]',
   Default = false,
   Callback = function(state)
      if state then
         getgenv().NoCdMoves = true
         oldindex = hookmetamethod(game, "__index", function(index, value)
            if tostring(index) == "LastUsed" and getgenv().NoCdMoves then
               return 0
            end
            return oldindex(index, value)
         end)
      else
         getgenv().NoCdMoves = false
         hookmetamethod(game, "__index", oldindex)
      end
   end
})

RightGroupBox4:AddToggle('NoSunDMG', {
   Text = 'No Sun Damage [DEMON]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"].Gameplay["Sun_Damage"].Disabled = true
      else
         game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"].Gameplay["Sun_Damage"].Disabled = false
      end
   end
})


local RightGroupBox5 = Tabs.Main:AddLeftGroupbox('GodModes')
RightGroupBox5:AddToggle('Regen Fast', {
   Text = 'RegenFast',
   Default = false, -- Default value (true / false)
   Tooltip = 'Infinite Heals', -- Information shown when you hover over the toggle
   Callback = function(state)
       if state then
           game:GetService("ReplicatedStorage").Remotes.regeneration_breathing_remote:FireServer(true)
       else
           game:GetService("ReplicatedStorage").Remotes.regeneration_breathing_remote:FireServer(false)
       end
   end
})

RightGroupBox5:AddToggle('RengokuMode', {
   Text = 'Rengoku Mode [Human/Slayer]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(true)
      else
         game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(false)
      end
   end
})

RightGroupBox5:AddToggle('GodSpeedMode', {
   Text = 'God Speed Mode [Human/Slayer]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(true)
      else
         game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(false)
      end
   end
})

RightGroupBox5:AddToggle('WarDrumsMode', {
   Text = 'War Drums Mode [All Races]',
   Default = false, -- Default value (true / false)
   Callback = function(Value)
      getgenv().infWD = Value
		while getgenv().infWD do 
		local args = {
    	[1] = true
		}

		game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("war_Drums_remote"):FireServer(unpack(args))
		wait(3)
      end
   end
})

RightGroupBox4:AddButton("Title Buffs", function()
local folderPath = game:GetService("Players").LocalPlayer.Player_Titles_List

    -- Loop through each child in the folder
    for _, child in ipairs(folderPath:GetChildren()) do
    if child:IsA("IntValue") then
   child.Value = 9999999999
   end
end
end)


RightGroupBox5:AddToggle('ShockGM', {
   Text = 'God Mode [Shockwave 50 + Demon]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.godmode = true
   while _G.godmode do
   local args = {
      [1] = "skil_ting_asd",
      [2] = game:GetService("Players").LocalPlayer,
      [3] = "akaza_bda_compass_needle",
      [4] = 1
   }
   
   game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
   wait(0.1)
   end
      else
         _G.godmode = false
         while _G.godmode do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "akaza_bda_compass_needle",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.1)
         end
      end
   end    
})

RightGroupBox5:AddToggle('DreamGM', {
   Text = 'God Mode [Dream ULT + Demon]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.DREAMgodmode = true
   while _G.DREAMgodmode do
   local args = {
      [1] = "skil_ting_asd",
      [2] = game:GetService("Players").LocalPlayer,
      [3] = "dream_bda_flesh_monster",
      [4] = 1
   }
   
   game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
   wait(0.1)
   end
      else
         _G.DREAMgodmode = false
         while _G.DREAMgodmode do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "dream_bda_flesh_monster",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.1)
         end
      end
   end    
})

RightGroupBox5:AddToggle('SwampGM', {
   Text = 'God Mode [Swamp ULT + Demon]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.SWAMPgodmode = true
   while _G.SWAMPgodmode do
   local args = {
      [1] = "skil_ting_asd",
      [2] = game:GetService("Players").LocalPlayer,
      [3] = "swamp_bda_swamp_domain",
      [4] = 1
   }
   
   game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
   wait(0.1)
   end
      else
         _G.SWAMPgodmode = false
         while _G.SWAMPgodmode do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "swamp_bda_swamp_domain",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.1)
         end
      end
   end    
})


RightGroupBox5:AddToggle('IceGM', {
   Text = 'God Mode [Ice ULT + Demon]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.ICEgodmode = true
   while _G.ICEgodmode do
   local args = {
      [1] = "skil_ting_asd",
      [2] = game:GetService("Players").LocalPlayer,
      [3] = "ice_demon_art_bodhisatva",
      [4] = 1
   }
   
   game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
   wait(0.1)
   end
      else
         _G.ICEgodmode = false
         while _G.ICEgodmode do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "ice_demon_art_bodhisatva",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.1)
         end
      end
   end    
})

RightGroupBox5:AddToggle('BloodGM', {
   Text = 'God Mode [Blood ULT + Demon]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.BloodGM = true
   while _G.BloodGM do
   local args = {
      [1] = "skil_ting_asd",
      [2] = game:GetService("Players").LocalPlayer,
      [3] = "explosive_demon_art_blood_burst",
      [4] = 1
   }
   
   game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
   wait(0.1)
   end
      else
         _G.BloodGM = false
         while _G.BloodGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "explosive_demon_art_blood_burst",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.1)
         end
      end
   end    
})

RightGroupBox5:AddToggle('SoundGM', {
   Text = 'God Mode [Sound 50+]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.SoundGM = true
         while _G.SoundGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "sound_breathing_smoke_screen",
            [4] = 1
          }
   
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
      wait(0.1)
         end
      else
         _G.SoundGM = false
         while _G.SoundGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "sound_breathing_smoke_screen",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(1)
         end
      end
   end    
})
RightGroupBox5:AddToggle('FlameGM', {
   Text = 'God Mode [Flame 32+]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.FlameGM = true
         while _G.FlameGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "flame_breathing_flaming_eruption",
            [4] = 1
          }
   
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
      wait(0.1)
         end
      else
         _G.FlameGM = false
         while _G.FlameGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "flame_breathing_flaming_eruption",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.1)
         end
      end
   end    
})

RightGroupBox5:AddToggle('BeastGM', {
   Text = 'God Mode [Beast 40+]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.BeastGM = true
         while _G.BeastGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "Beast_breathing_devouring_slash",
            [4] = 1
          }
   
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
      wait(0.5)
         end
      else
         _G.BeastGM = false
         while _G.BeastGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "Beast_breathing_devouring_slash",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.5)
         end
      end
   end    
})

RightGroupBox5:AddToggle('InsectGM', {
   Text = 'God Mode [Insect 28+]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.InsectGM = true
         while _G.InsectGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "insect_breathing_dance_of_the_centipede",
            [4] = 1
          }
   
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
      wait(0.5)
         end
      else
         _G.InsectGM = false
         while _G.InsectGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "insect_breathing_dance_of_the_centipede",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.5)
         end
      end
   end    
})

RightGroupBox5:AddToggle('WindGM', {
   Text = 'God Mode [Wind 30+]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.WindGM = true
         while _G.WindGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "Wind_breathing_black_wind_mountain_mist",
            [4] = 1
          }
   
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
      wait(0.5)
         end
      else
         _G.WindGM = false
         while _G.WindGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "Wind_breathing_black_wind_mountain_mist",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.5)
         end
      end
   end    
})

RightGroupBox5:AddToggle('WaterGM', {
   Text = 'God Mode [Water 30+]',
   Default = false, -- Default value (true / false)
   Callback = function(state)
      if state then
         _G.WaterGM = true
         while _G.WaterGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "Water_fall_basin",
            [4] = 1
          }
   
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
      wait(0.5)
         end
      else
         _G.WaterGM = false
         while _G.WaterGM do
         local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "Water_fall_basin",
            [4] = 1
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
         wait(0.5)
         end
      end
   end    
})

Library:OnUnload(function()
   print('Unloaded!')
   Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftControl', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('Shark V3 Fan Mad')
SaveManager:SetFolder('Shark V3 fan made')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!

